# frozen_string_literal: true

require 'itly-sdk'
require 'json_schemer'

class Itly
  ##
  # Schema Validator plugin class for Itly SDK
  #
  # Automatically loaded at runtime in any new +Itly+ object
  #
  class PluginSchemaValidator < Plugin
    attr_reader :logger, :schemas, :validators

    def initialize
      super

      @schemas = {}
      @validators = {}
    end

    ##
    # Initialize the validator object
    #
    # Plugin specific options are set when calling Itly#load
    # The option key for +PluginSchemaValidator+ is +schema_validator+. For example:
    #
    #     itly = Itly.new
    #     itly.load do |options|
    #       options.plugins.schema_validator = {schemas: {
    #         schema_1: {field: 'value, ...},
    #         schema_2: {field: 'value, ...}
    #       }}
    #     end
    #
    def load(options:)
      # Get options
      @logger = options.logger
      plugin_options = get_plugin_options options

      @schemas = plugin_options[:schemas]

      # Log
      logger.info "#{plugin_id}: load()"
    end

    ##
    # Validate an Event
    #
    # Call +event+ on all plugins and collect their return values.
    #
    # @param [Event] event: the event to validate
    #
    # @return [Array] array of Itly::ValidationResponse objects that were generated by the plugins
    #
    def validate(event:)
      # Log
      logger.info "#{plugin_id}: validate(event: #{event})"

      # Check that we have a schema for this event
      if @schemas[event.name.to_sym].nil?
        raise Itly::ValidationError, "Event '#{event.name}' not found in tracking plan."
      end

      # Lazily initialize and cache validator
      @validators[event.name.to_sym] ||= JSONSchemer.schema(@schemas[event.name.to_sym])

      # Validation
      properties = deeply_stringify_keys event.properties
      result = @validators[event.name.to_sym].validate properties

      return_validation_responses event, result
    end

    private

    def return_validation_responses(event, result)
      return if result.count.zero?

      message = "Passed in '#{event.name}' properties did not validate against your tracking plan. "\
        "Error#{'s' if result.count > 1}: "

      message += result.collect do |error|
        if error['details']
          hash_to_message error['details']
        else
          "#{error['data']} #{error['data_pointer']}"
        end
      end.join '. '

      Itly::ValidationResponse.new valid: false, plugin_id: plugin_id, message: message
    end

    def deeply_stringify_keys(hash)
      stringified_hash = {}
      hash.each do |k, v|
        stringified_hash[k.to_s] = \
          case v
          when Hash
            deeply_stringify_keys(v)
          when Array
            v.map { |i| i.is_a?(Hash) ? deeply_stringify_keys(i) : i }
          else
            v
          end
      end
      stringified_hash
    end

    def hash_to_message(hash)
      hash.collect do |k, v|
        "#{k}: #{v.join ', '}"
      end.join '. '
    end
  end
end
