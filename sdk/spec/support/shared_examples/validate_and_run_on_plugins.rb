# frozen_string_literal: true

# rubocop:disable Metrics/ParameterLists
shared_examples 'validate and run on plugins' do |
  method:, # Name of the method to call and to expect on plugins
  method_params:, # Params to pass to the method when calling it from Itly object
  expected_event_properties:, # Event properties expected to be generated by the method
  pass_data_as: , # Can be `:event` or `:properties`, indicate how the data is passed to the plugin
  context_properties: nil, # "Context" properties for initializing Itly object
  validation_value: nil, # "Validation" value for initializing Itly object
  generate_validation_error: false, # Flag to indicate if we are generating a validation error
  expected_log_info: nil, # Text to expect to be passed to logger#info by the method
  expected_validation_name: nil, # Event name expected during validation. Defaults to method name
  expect_to_call_action: true, # Indicates if it is expected that the action method is called on the plugins
  expect_validation: true, # Indicates if it is expected to have validation done
  expect_exception: false # Indicates if it is expected to raise an exception
|

  # Instanciate plugins and Itly object
  let!(:fake_logger) { double 'logger', info: nil, warn: nil }
  let!(:plugin_a) { FakePlugin0.new }
  let!(:plugin_b) { FakePlugin1.new }
  let!(:itly) { Itly.new }

  # Load options
  before do
    itly.load(context: context_properties) do |options|
      options.plugins = [plugin_a, plugin_b]
      options.validation = validation_value if validation_value
      options.logger = fake_logger
    end
  end

  # Default values for the expected validation name
  expected_validation_name = method if expected_validation_name.nil?

  # Create the event that is expected to be received for validation
  let(:expected_event) { Itly::Event.new name: expected_validation_name.to_s, properties: expected_event_properties }

  # Create the event that id expected to be received for the context validation
  # Also prepare the merged events that will be passed to the plugin's method
  if context_properties
    let(:expected_context_event) { Itly::Event.new name: 'context', properties: context_properties }
    let(:expected_merged_event) do
      Itly::Event.new \
        name: expected_validation_name.to_s,
        properties: context_properties.merge(expected_event_properties)
    end
  else
    let(:expected_merged_event) { expected_event }
  end

  # Prepare the data that is expected to be passed to the plugin
  let(:expected_data_to_plugin) do
    if pass_data_as == :event
      {event: expected_merged_event}
    elsif pass_data_as == :properties
      {properties: expected_merged_event.properties}
    end
  end

  # Prepare the validation responses to be expected from the validation methods
  let(:response1) { Itly::ValidationResponse.new valid: true, plugin_id: 'plugin123', message: 'Response1 message' }
  let(:response2) do
    Itly::ValidationResponse.new valid: !generate_validation_error, plugin_id: 'plugin123', message: 'Response2 message'
  end
  let(:response3) { Itly::ValidationResponse.new valid: true, plugin_id: 'plugin123', message: 'Response3 message' }
  let(:all_responses) do
    if !expect_validation
      []
    elsif context_properties
      [response1, response2, response3]
    else
      [response2, response3]
    end
  end

  # Hook all expectations
  before do
    # Logger messages
    if expect_validation
      if context_properties
        expect(itly.options.logger).to receive(:info).once
          .with("validate(event: #<Itly::Event: name: context, properties: #{context_properties}>)")
      end
      expect(itly.options.logger).to receive(:info).once
        .with("validate(event: #<Itly::Event: name: #{expected_validation_name}, "\
              "properties: #{expected_event_properties}>)")
    end
    expect(itly.options.logger).to receive(:info).once.with(expected_log_info) if expected_log_info
    expect(itly.options.logger).not_to receive(:info)

    if generate_validation_error && expect_validation
      expect(itly.options.logger).to receive(:error)
        .with(%(Validation error for "#{expected_validation_name}" in plugin123. Message: Response2 message))
    end
    expect(itly.options.logger).not_to receive(:error)

    # Validation calls and params
    if expect_validation
      if context_properties
        expect(plugin_a).to receive(:validate).once.with(event: expected_context_event).and_return(response1)
      end
      expect(plugin_a).to receive(:validate).once.with(event: expected_event).and_return(response2)
      expect(plugin_b).to receive(:validate).once.with(event: expected_context_event) if context_properties
      expect(plugin_b).to receive(:validate).once.with(event: expected_event).and_return(response3)
    end
    expect(plugin_b).not_to receive(:validate)
    expect(plugin_a).not_to receive(:validate)

    # Plugin targetted method
    if expect_to_call_action
      expect(plugin_a).to receive(method).once.with(method_params.merge(expected_data_to_plugin))
    end
    expect(plugin_a).not_to receive(method)
    if expect_to_call_action
      expect(plugin_b).to receive(method).once.with(method_params.merge(expected_data_to_plugin))
    end
    expect(plugin_b).not_to receive(method)

    # Plugin targetted post method
    expect(plugin_a).to receive(:"post_#{method}").once
      .with(method_params.merge(expected_data_to_plugin).merge(validation_results: all_responses))
    expect(plugin_a).not_to receive(:"post_#{method}")
    expect(plugin_b).to receive(:"post_#{method}").once
      .with(method_params.merge(expected_data_to_plugin).merge(validation_results: all_responses))
    expect(plugin_b).not_to receive(:"post_#{method}")
  end

  # Run
  it do
    if expect_exception
      expect do
        itly.send method, **method_params
      end.to raise_error(Itly::ValidationError, 'Response2 message')
    else
      itly.send method, **method_params
    end
  end
end
# rubocop:enable Metrics/ParameterLists
